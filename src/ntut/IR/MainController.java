package ntut.IR;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Paint;
import javafx.stage.DirectoryChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.function.Consumer;

public class MainController extends Observable implements Observer{
    //GUI Constants
    private String TEXT_FILL_DEFAULT = "#F00";

    //Data
    private Stage mStage = null;
    private Model mModel = new Model();
    private List<String> mSupportingList = new ArrayList<>();
    private DataSetGUIState mDataSetGUIState = null;

    //GUI Component
    @FXML
    private Label mDataSetDirectoryLabel;
    @FXML
    private ComboBox<String> mSupportingDataSetsComboBox;
    @FXML
    private VBox mDataSetSettingVBox;
    @FXML
    private ComboBox<String> mSupportClassificationMethodsComboBox;
    @FXML
    private Label mReportStoreLocationLabel;

    //GUI Data
    private String mDataSetDirectoryLabelText = "請先選擇 Data Set 資料夾位置 (File > Select Data Set Folder)";
    private Paint mDataSetDirectoryLabelTextFill = Paint.valueOf(TEXT_FILL_DEFAULT);
    private String mReportStoreLocationLabelText = "請選擇一個資料夾來存放報告(此資料夾除了存放資料，亦會存放索引檔案)";

    @FXML
    private void ClickCloseMenuItem(){
        mStage.close();
    }

    @FXML
    private void ClickSelectDataSetLocationMenuItem(){
        File location = showDirectoryChooser();
        if(location != null) {
            String SUCCESS_COLOR = "#000";
            String AUTO_REPORT_SAVE_DIR = "Report";
            String autoGeneratedReportSaveDir = location.getAbsolutePath()+ File.separator + AUTO_REPORT_SAVE_DIR;
            this.mModel.setDataSetLocation(location.getAbsolutePath());
            this.mModel.setReportStoreLocation(autoGeneratedReportSaveDir);
            this.setDataSetDirectoryLabelText(this.mModel.getDataSetLocation());
            this.setReportStoreLocationLabelText(autoGeneratedReportSaveDir);
            this.setDataSetDirectoryLabelTextFill(Paint.valueOf(SUCCESS_COLOR));
        }
    }

    private File showDirectoryChooser() {
        String DIRECTORY_CHOOSER_TITLE = "Choose a Directory";
        String PWD = ".";
        DirectoryChooser directoryChooser = new DirectoryChooser();
        directoryChooser.setTitle(DIRECTORY_CHOOSER_TITLE);
        directoryChooser.setInitialDirectory(new File(PWD));
        return directoryChooser.showDialog(mStage);
    }

    @FXML
    private void ClickAboutMenuItem(){
        String HEADER_TEXT = "Information Retrieval : Classification";
        String TITLE = "About";
        String CONTENT = "Authors:\n\t 104598013 孫季加\n\t 104598050 黃仲毅\n";
        Alert aboutAlert = new Alert(Alert.AlertType.INFORMATION);
        aboutAlert.setHeaderText(HEADER_TEXT);
        aboutAlert.setTitle(TITLE);
        aboutAlert.setContentText(CONTENT);
        aboutAlert.show();
    }

    @FXML
    private void ChangeDataSetComboBoxOption() throws IOException{
        this.mModel.getSupportingDataSetList().forEach(new Consumer<String>() {
            @Override
            public void accept(String s) {
                if(s.equals(mSupportingDataSetsComboBox.getValue())){
                    FXMLLoader loader = new DSADSState().loadGUI();
                    try {
                        mDataSetSettingVBox.getChildren().add(loader.load());
                    }catch (IOException exception){
                        showExceptionAlert(exception);
                    }
                }
            }
        });
    }

    @FXML
    private void ClickBrowseStoreReportLocationButton(){
        File location = this.showDirectoryChooser();
        if(location != null){
            this.mModel.setReportStoreLocation(location.getAbsolutePath());
            this.setReportStoreLocationLabelText(this.mModel.getReportStoreLocation());
        }
    }

    private void makeChange() {
        this.setChanged();
        this.notifyObservers();
    }

    public void setThisStage(Stage stage){
        mStage = stage;
        mStage.setMaxHeight(mStage.getHeight());
        mStage.setMinHeight(mStage.getHeight());
        mStage.setMaxWidth(mStage.getWidth());
        mStage.setMinWidth(mStage.getWidth());
        mStage.setIconified(false);
    }

    public String getDataSetDirectoryLabelText() {
        return mDataSetDirectoryLabelText;
    }

    public void setDataSetDirectoryLabelText(String mDataSetDirectoryLabelText) {
        this.mDataSetDirectoryLabelText = mDataSetDirectoryLabelText;
        this.makeChange();
    }

    public Paint getDataSetDirectoryLabelTextFill() {
        return mDataSetDirectoryLabelTextFill;
    }

    public void setDataSetDirectoryLabelTextFill(Paint mDataSetDirectoryLabelTextFill) {
        this.mDataSetDirectoryLabelTextFill = mDataSetDirectoryLabelTextFill;
        this.makeChange();
    }

    public String getReportStoreLocationLabelText() {
        return mReportStoreLocationLabelText;
    }

    public void setReportStoreLocationLabelText(String mReportStoreLocationLabelText) {
        this.mReportStoreLocationLabelText = mReportStoreLocationLabelText;
        this.makeChange();
    }

    @Override
    public void update(Observable o, Object arg) {
        this.mDataSetDirectoryLabel.setText(this.getDataSetDirectoryLabelText());
        this.mDataSetDirectoryLabel.setTextFill(this.getDataSetDirectoryLabelTextFill());
        this.mReportStoreLocationLabel.setText(this.getReportStoreLocationLabelText());
    }

    public void initialize(){
        this.addObserver(this);
        try {
            this.mModel.init();
        }catch (IOException exception){
            showExceptionAlert(exception);
        }

        //Support Data Sets
        this.mSupportingDataSetsComboBox.setItems(FXCollections.observableList(this.mModel.getSupportingDataSetList()));
        //Support Classification Methods
        this.mSupportClassificationMethodsComboBox.setItems(FXCollections.observableList(this.mModel.getSupportClassificationMethodList()));
        this.mSupportClassificationMethodsComboBox.valueProperty().set(this.mModel.getSupportClassificationMethodList().get(0));

        this.makeChange();
    }

    private void showExceptionAlert(IOException exception) {
        String ALERT_TITLE = "Error";
        String ALERT_HEADER = "IOException";
        Alert ioErrorAlert = new Alert(Alert.AlertType.ERROR);
        ioErrorAlert.setTitle(ALERT_TITLE);
        ioErrorAlert.setHeaderText(ALERT_HEADER);
        ioErrorAlert.setContentText(exception.getLocalizedMessage());
    }
}
